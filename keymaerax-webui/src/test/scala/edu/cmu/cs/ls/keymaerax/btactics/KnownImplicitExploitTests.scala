/*
 * Copyright (c) Carnegie Mellon University, Karlsruhe Institute of Technology.
 * See LICENSE.txt for the conditions of this license.
 */

package edu.cmu.cs.ls.keymaerax.btactics

import edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary.skip
import edu.cmu.cs.ls.keymaerax.core.{CoreException, False, Function, Real}
import edu.cmu.cs.ls.keymaerax.parser.StringConverter._

/**
 * Tests that exploit unsound implicit definitions.
 *
 * @author
 *   James Gallicchio
 */
class KnownImplicitExploitTests extends TacticTestBase {

  "implicit defs" should "not allow non-unique definitions" in withMathematica { _ =>
    the[CoreException] thrownBy Function(
      name = "bad",
      domain = Real,
      sort = Real,
      interp = Some( /* bad(._1) = . <-> */ ". = 0 | . = 1".asFormula),
    ) should have message
      """Core requirement failed: Function interpretation can only mention uninterpreted dots: Vector(\cdot_0, \cdot_1) but got: Set(\cdot)"""

    val pvble = proveBy(
      False,
      skip, // TODO
    )

    pvble should not be Symbol("proved")
  }

  it should "not allow non-continuous definitions" in withMathematica { _ =>
    the[CoreException] thrownBy Function(
      name = "stepDown",
      domain = Real,
      sort = Real,
      interp = Some( /* stepDown(._1) = . <-> */ "._1 <= 0 & . = 1 | ._1 > 0 & . = 0".asFormula),
    ) should have message
      """Core requirement failed: Function interpretation can only mention uninterpreted dots: Vector(\cdot_0, \cdot_1) but got: Set(\cdot_1, \cdot)"""

    val pvble = proveBy(
      False,
      skip, // TODO
    )

    pvble should not be Symbol("proved")
  }

  it should "not allow non-smooth definitions" in withMathematica { _ =>
    // abs is non-smooth already, should be able to prove false from it

    val pvble = proveBy(
      False,
      skip, // TODO
    )

    pvble should not be Symbol("proved")
  }

}
