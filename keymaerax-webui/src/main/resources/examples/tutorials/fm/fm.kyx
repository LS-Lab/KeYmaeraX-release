ArchiveEntry "FM16/Tutorial Example 1"
  Description "Simple model of straight-line driving. Car can never accelerate because of an always-false acceleration guard.".
  Title "1-dimensional car with false acceleration guard".
  Link "http://www.ls.cs.cmu.edu/KeYmaeraX/tutorial/KeYmaeraX-tutorial.pdf#page=23".

ProgramVariables
  Real m;  /* Stop-sign position */
  Real A;  /* Maximum acceleration */
  Real b;  /* Maximum braking */
  Real ep; /* Maximum control cycle duration */
  Real x;  /* Car position */
  Real v;  /* Speed */
  Real a;  /* Actual acceleration */
  Real sb; /* Start braking point */
  Real t;  /* Controller clock */
End.

Problem
    x <= m
  & A >= 0
  & b > 0
  & ep > 0
  & v = 0
->
  [{
     {   ?x > m; a := A;
      ++ a := -b;
     }
     t := 0;
     { x'=v, v'=a, t'=1 & v >= 0 & t <= ep }
   }*@invariant(x<=m & v=0)
  ]x <= m
End.

Tactic "Proof Formal Methods Tutorial Example 1"
  autoClose
End.

End.

ArchiveEntry "FM16/Tutorial Example 2"
  Description "Simple model of straight-line driving that avoids collision. Car can accelerate or break, with the start braking distance left abstract.".
  Title "1-dimensional car with abstract start braking distance".
  Link "http://www.ls.cs.cmu.edu/KeYmaeraX/tutorial/KeYmaeraX-tutorial.pdf#page=50".

ProgramVariables
  Real m;  /* Stop-sign position */
  Real A;  /* Maximum acceleration */
  Real b;  /* Maximum braking */
  Real ep; /* Maximum control cycle duration */
  Real x;  /* Car position */
  Real v;  /* Speed */
  Real a;  /* Actual acceleration */
  Real sb; /* Start braking point */
  Real t;  /* Controller clock */
End.

Problem
    x <= m
  & A >= 0
  & b > 0
  & ep > 0
  & v = 0
->
  [{
     {   ?m - x >= sb; a := A;
      ++ a := -b;
     }
     t := 0;
     { x'=v, v'=a, t'=1 & v >= 0 & t <= ep }
   }*
  ]x <= m
End.

Tactic "Steps Formal Methods Tutorial Example 2"
useSolver("Mathematica");
implyR('R=="x<=m&A>=0&b>0&ep>0&v=0->[{{?m-x>=sb;a:=A;++a:=-b;}t:=0;{x'=v,v'=a,t'=1&v>=0&t<=ep}}*]x<=m");
andL('L=="x<=m&A>=0&b>0&ep>0&v=0");
andL('L=="A>=0&b>0&ep>0&v=0");
andL('L=="b>0&ep>0&v=0");
andL('L=="ep>0&v=0");
loop("x<=m", 'R=="[{{?m-x>=sb;a:=A;++a:=-b;}t:=0;{x'=v,v'=a,t'=1&v>=0&t<=ep}}*]x<=m"); <(
  "Init":
    prop,
  "Post":
    prop,
  "Step":
    unfold; <(
      "[?m-x>=sb;a:=A;][t:=0;{x'=v,v'=a,t'=1&v>=0&t<=ep}]x<=m":
        solve('R=="[{x'=v,v'=A,t'=1&v>=0&t<=ep}]x<=m");
        pQE;
        transform("m-x>=A/2*ep^2+ep*v", 'R=="v < 0|v=0&(A<=0|A>0&(m < 1/2*(A*ep^2+2*x)&sb>m+-x|m>=1/2*(A*ep^2+2*x)))|v>0&(m < 1/2*(A*ep^2+2*ep*v+2*x)&sb>m+-x|m>=1/2*(A*ep^2+2*ep*v+2*x))"),
      "[a:=-b;][t:=0;{x'=v,v'=a,t'=1&v>=0&t<=ep}]x<=m":
        solve('R=="[{x'=v,v'=-b,t'=1&v>=0&t<=ep}]x<=m");
        pQE;
        transform("m-x>=v^2/(2*b)", 'R=="v<=0|v>0&(b < ep^(-1)*v&m>=1/2*((-b)*ep^2+2*ep*v+2*x)|b=ep^(-1)*v&(m=1/2*((-b)*ep^2+2*ep*v+2*x)|m>1/2*b^(-1)*(v^2+2*b*x))|b>ep^(-1)*v&m>=1/2*b^(-1)*(v^2+2*b*x))")
    )
) partial
End.

End.

ArchiveEntry "FM16/Tutorial Example 3"
  Description "Simple model of straight-line driving that avoids collision. Car can accelerate or break, with the start braking distance left abstract.".
  Title "1-dimensional car with safe start braking distance".
  Link "http://www.ls.cs.cmu.edu/KeYmaeraX/tutorial/KeYmaeraX-tutorial.pdf#page=97".

ProgramVariables
  Real m;  /* Stop-sign position */
  Real A;  /* Maximum acceleration */
  Real b;  /* Maximum braking */
  Real ep; /* Maximum control cycle duration */
  Real x;  /* Car position */
  Real v;  /* Speed */
  Real a;  /* Actual acceleration */
  Real sb; /* Start braking point */
  Real t;  /* Controller clock */
End.

Problem
    x <= m
  & A >= 0
  & b > 0
  & ep > 0
  & v = 0
->
  [{
     {   ?m - x >= v^2/(2*b) + (A/b + 1)*(A/2*ep^2 + ep*v); a := A;
      ++ a := -b;
     }
     t := 0;
     { x'=v, v'=a, t'=1 & v >= 0 & t <= ep }
   }*@invariant(v >= 0 & x + v^2/(2*b) <= m)
  ]x <= m
End.

Tactic "Proof Formal Methods Tutorial Example 3"
implyR('R=="x<=m&A>=0&b>0&ep>0&v=0->[{{?m-x>=v^2/(2*b)+(A/b+1)*(A/2*ep^2+ep*v);a:=A;++a:=-b;}t:=0;{x'=v,v'=a,t'=1&v>=0&t<=ep}}*]x<=m");
andL('L=="x<=m&A>=0&b>0&ep>0&v=0");
andL('L=="A>=0&b>0&ep>0&v=0");
andL('L=="b>0&ep>0&v=0");
andL('L=="ep>0&v=0");
loop("v>=0&x+v^2/(2*b)<=m", 'R=="[{{?m-x>=v^2/(2*b)+(A/b+1)*(A/2*ep^2+ep*v);a:=A;++a:=-b;}t:=0;{x'=v,v'=a,t'=1&v>=0&t<=ep}}*]x<=m"); <(
  "Init":
    QE,
  "Post":
    QE,
  "Step":
    composeb('R=="[{?m-x>=v^2/(2*b)+(A/b+1)*(A/2*ep^2+ep*v);a:=A;++a:=-b;}t:=0;{x'=v,v'=a,t'=1&v>=0&t<=ep}](v>=0&x+v^2/(2*b)<=m)");
    composeb('R=="[?m-x>=v^2/(2*b)+(A/b+1)*(A/2*ep^2+ep*v);a:=A;++a:=-b;]#[t:=0;{x'=v,v'=a,t'=1&v>=0&t<=ep}](v>=0&x+v^2/(2*b)<=m)#");
    solve('R=="[?m-x>=v^2/(2*b)+(A/b+1)*(A/2*ep^2+ep*v);a:=A;++a:=-b;][t:=0;]#[{x'=v,v'=a,t'=1&v>=0&t<=ep}](v>=0&x+v^2/(2*b)<=m)#");
    assignb('R=="[?m-x>=v^2/(2*b)+(A/b+1)*(A/2*ep^2+ep*v);a:=A;++a:=-b;]#[t:=0;]\forall t_ (t_>=0->\forall s_ (0<=s_&s_<=t_->a*s_+v>=0&s_+t<=ep)->a*t_+v>=0&a*(t_^2/2)+v*t_+x+(a*t_+v)^2/(2*b)<=m)#");
    choiceb('R=="[?m-x>=v^2/(2*b)+(A/b+1)*(A/2*ep^2+ep*v);a:=A;++a:=-b;]\forall t_ (t_>=0->\forall s_ (0<=s_&s_<=t_->a*s_+v>=0&s_+0<=ep)->a*t_+v>=0&a*(t_^2/2)+v*t_+x+(a*t_+v)^2/(2*b)<=m)");
    composeb('R=="#[?m-x>=v^2/(2*b)+(A/b+1)*(A/2*ep^2+ep*v);a:=A;]\forall t_ (t_>=0->\forall s_ (0<=s_&s_<=t_->a*s_+v>=0&s_+0<=ep)->a*t_+v>=0&a*(t_^2/2)+v*t_+x+(a*t_+v)^2/(2*b)<=m)#&[a:=-b;]\forall t_ (t_>=0->\forall s_ (0<=s_&s_<=t_->a*s_+v>=0&s_+0<=ep)->a*t_+v>=0&a*(t_^2/2)+v*t_+x+(a*t_+v)^2/(2*b)<=m)");
    assignb('R=="[?m-x>=v^2/(2*b)+(A/b+1)*(A/2*ep^2+ep*v);]#[a:=A;]\forall t_ (t_>=0->\forall s_ (0<=s_&s_<=t_->a*s_+v>=0&s_+0<=ep)->a*t_+v>=0&a*(t_^2/2)+v*t_+x+(a*t_+v)^2/(2*b)<=m)#&[a:=-b;]\forall t_ (t_>=0->\forall s_ (0<=s_&s_<=t_->a*s_+v>=0&s_+0<=ep)->a*t_+v>=0&a*(t_^2/2)+v*t_+x+(a*t_+v)^2/(2*b)<=m)");
    testb('R=="#[?m-x>=v^2/(2*b)+(A/b+1)*(A/2*ep^2+ep*v);]\forall t_ (t_>=0->\forall s_ (0<=s_&s_<=t_->A*s_+v>=0&s_+0<=ep)->A*t_+v>=0&A*(t_^2/2)+v*t_+x+(A*t_+v)^2/(2*b)<=m)#&[a:=-b;]\forall t_ (t_>=0->\forall s_ (0<=s_&s_<=t_->a*s_+v>=0&s_+0<=ep)->a*t_+v>=0&a*(t_^2/2)+v*t_+x+(a*t_+v)^2/(2*b)<=m)");
    assignb('R=="(m-x>=v^2/(2*b)+(A/b+1)*(A/2*ep^2+ep*v)->\forall t_ (t_>=0->\forall s_ (0<=s_&s_<=t_->A*s_+v>=0&s_+0<=ep)->A*t_+v>=0&A*(t_^2/2)+v*t_+x+(A*t_+v)^2/(2*b)<=m))&#[a:=-b;]\forall t_ (t_>=0->\forall s_ (0<=s_&s_<=t_->a*s_+v>=0&s_+0<=ep)->a*t_+v>=0&a*(t_^2/2)+v*t_+x+(a*t_+v)^2/(2*b)<=m)#");
    andR('R=="(m-x>=v^2/(2*b)+(A/b+1)*(A/2*ep^2+ep*v)->\forall t_ (t_>=0->\forall s_ (0<=s_&s_<=t_->A*s_+v>=0&s_+0<=ep)->A*t_+v>=0&A*(t_^2/2)+v*t_+x+(A*t_+v)^2/(2*b)<=m))&\forall t_ (t_>=0->\forall s_ (0<=s_&s_<=t_->(-b)*s_+v>=0&s_+0<=ep)->(-b)*t_+v>=0&(-b)*(t_^2/2)+v*t_+x+((-b)*t_+v)^2/(2*b)<=m)"); <(
      "m-x>=v^2/(2*b)+(A/b+1)*(A/2*ep^2+ep*v)->\forall t_ (t_>=0->\forall s_ (0<=s_&s_<=t_->A*s_+v>=0&s_+0<=ep)->A*t_+v>=0&A*(t_^2/2)+v*t_+x+(A*t_+v)^2/(2*b)<=m)":
        prop;
        QE("Mathematica"),
      "\forall t_ (t_>=0->\forall s_ (0<=s_&s_<=t_->(-b)*s_+v>=0&s_+0<=ep)->(-b)*t_+v>=0&(-b)*(t_^2/2)+v*t_+x+((-b)*t_+v)^2/(2*b)<=m)":
        prop;
        QE("Mathematica")
    )
)
End.
End.

ArchiveEntry "FM16/Tutorial Example 4"
  Description "Proving unsolvable ODEs with differential invariants.".
  Title "Increasingly Damped oscillator".
  Link "http://www.ls.cs.cmu.edu/KeYmaeraX/tutorial/KeYmaeraX-tutorial.pdf#page=114".

Definitions
  Real w();
  Real c();
End.

ProgramVariables
  Real x;
  Real y;
  Real d;
End.

Problem
    w()^2*x^2 + y^2 <= c()^2
  & d>=0
->
  [{x'=y, y'=-w()^2*x-2*d*w()*y, d'=7 & w()>=0}]w()^2*x^2 + y^2 <= c()^2
End.

Tactic "Proof Formal Methods Tutorial Example 4"
implyR('R=="w()^2*x^2+y^2<=c()^2&d>=0->[{x'=y,y'=-w()^2*x-2*d*w()*y,d'=7&w()>=0}]w()^2*x^2+y^2<=c()^2");
dC("d>=0", 'R=="[{x'=y,y'=-w()^2*x-2*d*w()*y,d'=7&w()>=0}]w()^2*x^2+y^2<=c()^2"); <(
  "Use":
    dI('R=="[{x'=y,y'=-w()^2*x-2*d*w()*y,d'=7&w()>=0&d>=0}]w()^2*x^2+y^2<=c()^2"),
  "Show":
    dI('R=="[{x'=y,y'=-w()^2*x-2*d*w()*y,d'=7&w()>=0}]d>=0")
)
End.
End.

ArchiveEntry "FM16/Tutorial Example 5"
  Description "Simple model of steering, car avoids collision with other cars.".
  Title "2-dimensional car".
  Link "http://www.ls.cs.cmu.edu/KeYmaeraX/tutorial/KeYmaeraX-tutorial.pdf#page=130".

Definitions
  import kyx.math.abs;
  Real ep;   /* time limit for control decisions */
  Real B;    /* minimum braking capability of the robot */
  Real A;    /* maximum acceleration -B <= a <= A */
End.

ProgramVariables
  Real x;    /* robot position: x */
  Real y;    /* robot position: y */
  Real v;    /* robot translational velocity */
  Real a;    /* robot translational acceleration */
  Real dx;   /* robot orientation: x */
  Real dy;   /* robot orientation: y */
  Real w;    /* robot rotational velocity */
  Real r;    /* radius of curve (i)straight: k=infty; (ii)curve: k!=infty */
  Real xo;   /* position summary of obstacles */
  Real yo;
  Real t;    /* time */
End.

Problem
    v >= 0
  & ( abs(x-xo) > v^2 / (2*B)
    | abs(y-yo) > v^2 / (2*B))
  & dx^2 + dy^2 = 1
  & A >= 0
  & B > 0
  & ep > 0
  & r != 0
  ->
  [
    {
      {
        {
          /* brake on current curve or remain stopped */
          { a := -B; }
          ++
          { ?v = 0; a := 0; w := 0; }
      	  ++
          /* or choose a new safe curve */
          { a :=*; ?-B <= a & a <= A;
            r :=*; ?r != 0;
            w :=*; ?v = w/r;

            /* for the chosen a, w, cx, cy: worst case position of obstacles wrt. curve */
            xo :=*;
            yo :=*;

            /* use that curve, if it is a safe one (admissible velocities) */
            ? abs(x-xo) > v^2/(2*B) + (A/B + 1) * (A/2 * ep^2 + ep*v)
            | abs(y-yo) > v^2/(2*B) + (A/B + 1) * (A/2 * ep^2 + ep*v);
    	  }
    	};
    	t := 0;
      }

      /* dynamics */
      { x' = v * dx,
        y' = v * dy,
        dx' = -w * dy,
        dy' = w * dx,
        v' = a,
        w' = a/r,
        t' = 1 & t <= ep & v >= 0
      }
    }*@invariant(v >= 0
                  & dx^2+dy^2 = 1
                  & r != 0
                  & (abs(x-xo) > v^2 / (2*B)
                   | abs(y-yo) > v^2 / (2*B)))
  ] (x - xo)^2 + (y - yo)^2 > 0
End.

Tactic "Proof Formal Methods Tutorial Example 5"
useSolver("Mathematica");
implyR('R=="v>=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B()))&dx^2+dy^2=1&A()>=0&B()>0&ep()>0&r!=0->[{{{a:=-B();++?v=0;a:=0;w:=0;++a:=*;?-B()<=a&a<=A();r:=*;?r!=0;w:=*;?v=w/r;xo:=*;yo:=*;?abs(x-xo)>v^2/(2*B())+(A()/B()+1)*(A()/2*ep()^2+ep()*v)|abs(y-yo)>v^2/(2*B())+(A()/B()+1)*(A()/2*ep()^2+ep()*v);}t:=0;}{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=a,w'=a/r,t'=1&t<=ep()&v>=0}}*](x-xo)^2+(y-yo)^2>0");
andL('L=="v>=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B()))&dx^2+dy^2=1&A()>=0&B()>0&ep()>0&r!=0");
andL('L=="(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B()))&dx^2+dy^2=1&A()>=0&B()>0&ep()>0&r!=0");
andL('L=="dx^2+dy^2=1&A()>=0&B()>0&ep()>0&r!=0");
andL('L=="A()>=0&B()>0&ep()>0&r!=0");
andL('L=="B()>0&ep()>0&r!=0");
andL('L=="ep()>0&r!=0");
loop("v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B()))", 'R=="[{{{a:=-B();++?v=0;a:=0;w:=0;++a:=*;?-B()<=a&a<=A();r:=*;?r!=0;w:=*;?v=w/r;xo:=*;yo:=*;?abs(x-xo)>v^2/(2*B())+(A()/B()+1)*(A()/2*ep()^2+ep()*v)|abs(y-yo)>v^2/(2*B())+(A()/B()+1)*(A()/2*ep()^2+ep()*v);}t:=0;}{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=a,w'=a/r,t'=1&t<=ep()&v>=0}}*](x-xo)^2+(y-yo)^2>0"); <(
  "Init":
    print("Base");
    prop,
  "Post":
    print("Use");
    QE,
  "Step":
    print("Unfolding...");
    unfold; <(
      "[a:=-B();][t:=0;][{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=a,w'=a/r,t'=1&t<=ep()&v>=0}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))":
        print("Case 1");
        diffInvariant("t>=0", 'R=="[{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=-B(),w'=(-B())/r,t'=1&t<=ep()&v>=0}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))");
        diffInvariant("dx^2+dy^2=1", 'R=="[{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=-B(),w'=(-B())/r,t'=1&(t<=ep()&v>=0)&t>=0}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))");
        diffInvariant("v=old(v)-B()*t", 'R=="[{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=-B(),w'=(-B())/r,t'=1&((t<=ep()&v>=0)&t>=0)&dx^2+dy^2=1}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))");
        diffInvariant("-t*(v+B()/2*t)<=x-old(x)&x-old(x)<=t*(v+B()/2*t)", 'R=="[{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=-B(),w'=(-B())/r,t'=1&(((t<=ep()&v>=0)&t>=0)&dx^2+dy^2=1)&v=v_0-B()*t}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))");
        diffInvariant("-t*(v+B()/2*t)<=y-old(y)&y-old(y)<=t*(v+B()/2*t)", 'R=="[{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=-B(),w'=(-B())/r,t'=1&((((t<=ep()&v>=0)&t>=0)&dx^2+dy^2=1)&v=v_0-B()*t)&-t*(v+B()/2*t)<=x-x_0&x-x_0<=t*(v+B()/2*t)}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))");
        dW('R=="[{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=-B(),w'=(-B())/r,t'=1&(((((t<=ep()&v>=0)&t>=0)&dx^2+dy^2=1)&v=v_0-B()*t)&-t*(v+B()/2*t)<=x-x_0&x-x_0<=t*(v+B()/2*t))&-t*(v+B()/2*t)<=y-y_0&y-y_0<=t*(v+B()/2*t)}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))");
        QE,
      "[?v=0;a:=0;w:=0;][t:=0;][{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=a,w'=a/r,t'=1&t<=ep()&v>=0}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))":
        print("Case 2");
        diffInvariant("t>=0", 'R=="[{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=0,w'=0/r,t'=1&t<=ep()&v>=0}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))");
        diffInvariant("dx^2+dy^2=1", 'R=="[{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=0,w'=0/r,t'=1&(t<=ep()&v>=0)&t>=0}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))");
        diffInvariant("v=old(v)", 'R=="[{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=0,w'=0/r,t'=1&((t<=ep()&v>=0)&t>=0)&dx^2+dy^2=1}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))");
        diffInvariant("x=old(x)", 'R=="[{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=0,w'=0/r,t'=1&(((t<=ep()&v>=0)&t>=0)&dx^2+dy^2=1)&v=v_0}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))");
        diffInvariant("y=old(y)", 'R=="[{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=0,w'=0/r,t'=1&((((t<=ep()&v>=0)&t>=0)&dx^2+dy^2=1)&v=v_0)&x=x_0}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))");
        dW('R=="[{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=0,w'=0/r,t'=1&(((((t<=ep()&v>=0)&t>=0)&dx^2+dy^2=1)&v=v_0)&x=x_0)&y=y_0}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))");
        QE,
      "[a:=*;?-B()<=a&a<=A();r:=*;?r!=0;w:=*;?v=w/r;xo:=*;yo:=*;?abs(x-xo)>v^2/(2*B())+(A()/B()+1)*(A()/2*ep()^2+ep()*v)|abs(y-yo)>v^2/(2*B())+(A()/B()+1)*(A()/2*ep()^2+ep()*v);][t:=0;][{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=a,w'=a/r,t'=1&t<=ep()&v>=0}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))":
        print("Case 3");
        hideL('L=="abs(x-xo_0)>v^2/(2*B())|abs(y-yo_0)>v^2/(2*B())");
        diffInvariant("t>=0", 'R=="[{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=a,w'=a/r,t'=1&t<=ep()&v>=0}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))");
        diffInvariant("dx^2+dy^2=1", 'R=="[{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=a,w'=a/r,t'=1&(t<=ep()&v>=0)&t>=0}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))");
        diffInvariant("v=old(v)+a*t", 'R=="[{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=a,w'=a/r,t'=1&((t<=ep()&v>=0)&t>=0)&dx^2+dy^2=1}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))");
        diffInvariant("-t*(v-a/2*t)<=x-old(x)&x-old(x)<=t*(v-a/2*t)", 'R=="[{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=a,w'=a/r,t'=1&(((t<=ep()&v>=0)&t>=0)&dx^2+dy^2=1)&v=v_0+a*t}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))");
        diffInvariant("-t*(v-a/2*t)<=y-old(y)&y-old(y)<=t*(v-a/2*t)", 'R=="[{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=a,w'=a/r,t'=1&((((t<=ep()&v>=0)&t>=0)&dx^2+dy^2=1)&v=v_0+a*t)&-t*(v-a/2*t)<=x-x_0&x-x_0<=t*(v-a/2*t)}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))");
        dW('R=="[{x'=v*dx,y'=v*dy,dx'=-w*dy,dy'=w*dx,v'=a,w'=a/r,t'=1&(((((t<=ep()&v>=0)&t>=0)&dx^2+dy^2=1)&v=v_0+a*t)&-t*(v-a/2*t)<=x-x_0&x-x_0<=t*(v-a/2*t))&-t*(v-a/2*t)<=y-y_0&y-y_0<=t*(v-a/2*t)}](v>=0&dx^2+dy^2=1&r!=0&(abs(x-xo)>v^2/(2*B())|abs(y-yo)>v^2/(2*B())))");
        prop; <(
          "abs(x_0-xo)>v_0^2/(2*B())+(A()/B()+1)*(A()/2*ep()^2+ep()*v_0)":
            hideR('R=="abs(y-yo)>v^2/(2*B())");
            transformEquality("ep()=t", 'L=="abs(x_0-xo)>v_0^2/(2*B())+(A()/B()+1)*(A()/2*ep()^2+ep()*v_0)");
            smartQE,
          "abs(y_0-yo)>v_0^2/(2*B())+(A()/B()+1)*(A()/2*ep()^2+ep()*v_0)":
            hideR('R=="abs(x-xo)>v^2/(2*B())");
            transformEquality("ep()=t", 'L=="abs(y_0-yo)>v_0^2/(2*B())+(A()/B()+1)*(A()/2*ep()^2+ep()*v_0)");
            smartQE
        )
    )
)
End.
End.
