ArchiveEntry "CPSWeek16/Tutorial Example 1"
  Description "Simple model of straight-line driving that avoids collision with cars ahead. Car can either apply full brakes or maximum acceleration, if safe.".
  Title "1-dimensional car".
  Link "http://www.ls.cs.cmu.edu/KeYmaeraX/KeYmaeraX-tutorial.pdf#page=59".

Definitions
  Real A;
  Real b;
  Real m;
  Real ep;
End.

ProgramVariables
  Real x;
  Real v;
  Real a;
  Real t;
End.

Problem
  A>=0 & b>0 & v^2<=2*b*(m-x) & ep>0 -> [
    {
      {  a := -b;
      ++ ?2*b*(m-x) >= v^2+(A+b)*(A*ep^2+2*ep*v); a:=A;
      }
      t:=0; {x'=v,v'=a,t'=1 & v>=0 & t<=ep}
    }*@invariant(v^2 <= 2*b*(m-x))
  ]x<=m
End.

Tactic "Proof CPSWeek Tutorial Example 1"
implyR(1); (andL('L)*); loop("v^2 <= 2*b()*(m()-x)", 1); <(
  QE; done,
  QE; done,
  composeb(1); choiceb(1); andR(1); <(
    assignb(1); composeb(1); assignb(1); ODE(1); done,
    composeb(1); testb(1); implyR(1); assignb(1); composeb(1); assignb(1); ODE(1); done
  )
)
End.

End.

ArchiveEntry "CPSWeek16/Tutorial Example 2"
  Description "Proving unsolvable ODEs with differential invariants.".
  Title "Damped oscillator".
  Link "http://www.ls.cs.cmu.edu/KeYmaeraX/KeYmaeraX-tutorial.pdf#page=127".

Definitions
  Real d;
  Real w;
  Real c;
End.

ProgramVariables
  Real x;
  Real y;
End.

Problem
  w^2*x^2+y^2<=c^2 -> [
    {x'=y, y'=-w^2*x - 2*d*w*y & w>=0 & d>=0}
  ]w^2*x^2+y^2<=c^2
End.

Tactic "Proof CPSWeek Tutorial Example 2"
  implyR('R); dI('R); done
End.

End.

ArchiveEntry "CPSWeek16/Tutorial Example 3"
  Description "Proving unsolvable ODEs with differential invariants.".
  Title "Motzkin".
  Link "http://www.ls.cs.cmu.edu/KeYmaeraX/KeYmaeraX-tutorial.pdf#page=128".

ProgramVariables
  Real x1;
  Real x2;
  Real c;
End.

Problem
  x1^4*x2^2+x1^2*x2^4-3*x1^2*x2^2+1 <= c ->
  [
    {x1'=2*x1^4*x2+4*x1^2*x2^3-6*x1^2*x2, x2'=-4*x1^3*x2^2-2*x1*x2^4+6*x1*x2^2}
  ] x1^4*x2^2+x1^2*x2^4-3*x1^2*x2^2+1 <= c
End.

Tactic "Proof CPSWeek Tutorial Example 3"
  implyR('R); diffInvariant("x1^4*x2^2+x1^2*x2^4-3*x1^2*x2^2+1 <= c", 1); dW('R); prop; done
End.

End.

ArchiveEntry "CPSWeek16/Tutorial Example 4"
  Description "Simple model of steering, car avoids collision with other cars.".
  Title "2-dimensional car".
  Link "http://www.ls.cs.cmu.edu/KeYmaeraX/KeYmaeraX-tutorial.pdf#page=148".

Definitions
  import kyx.math.abs;

  Real A;
  Real b;
  Real ep;
End.

ProgramVariables
  Real x;
  Real y;
  Real dx;
  Real dy;
  Real v;
  Real a;
  Real w;
  Real r;
  Real mx;
  Real my;
  Real t;
End.

Problem
  A>=0 & b>0 & r!=0 & dx^2+dy^2=1 & (2*b*abs(mx-x)>v^2 | 2*b*abs(my-y)>v^2) & v>=0 & r*w=v & ep>0 -> [
    {
      {  a := -b;
      ++ a:=A; w:=*; r:=*; ?r!=0 & w*r=v; mx:=*; my:=*;
         ?2*b*abs(mx-x) > v^2+(A+b)*(A*ep^2+2*ep*v) | 2*b*abs(my-y) > v^2+(A+b)*(A*ep^2+2*ep*v);
      }
      t:=0; {x'=v*dx, y'=v*dy, v'=a, dx'=-w*dy, dy'=w*dx, w'=a/r, t'=1 & v>=0 & t<=ep}
    }*@invariant(r!=0 & v>=0 & dx^2+dy^2=1 & (2*b*abs(mx-x)>v^2 | 2*b*abs(my-y)>v^2))
  ](mx-x)^2+(my-y)^2 > 0
End.

Tactic "Proof CPSWeek Tutorial Example 4"
implyR(1); (andL('L)*); loop("r!=0 & v>=0 & dx^2+dy^2=1 & (2*b()*abs(mx-x)>v^2 | 2*b()*abs(my-y)>v^2)", 1); <(
  QE; done,
  QE; done,
  composeb(1); choiceb(1); andR(1); <(
    assignb(1); composeb(1); assignb(1);
    diffInvariant("dx^2+dy^2=1", 1); 
    diffInvariant("t>=0", 1);
    diffInvariant("v=old(v)-b()*t", 1);
    diffInvariant("-t*(v+b()/2*t)<=x-old(x) & x-old(x)<=t*(v+b()/2*t)", 1);
    diffInvariant("-t*(v+b()/2*t)<=y-old(y) & y-old(y)<=t*(v+b()/2*t)", 1);
    (andL('L)*); dW(1); smartQE; done
    ,
    composeb(1); assignb(1); composeb(1); randomb(1); allR(1); composeb(1); randomb(1); allR(1);
    composeb(1); testb(1); implyR(1); composeb(1); randomb(1); allR(1); composeb(1); randomb(1); allR(1);
    testb(1); implyR(1); composeb(1); assignb(1);
    diffInvariant("dx^2+dy^2=1", 1);
    diffInvariant("t>=0", 1);
    diffInvariant("v=old(v)+A()*t", 1);
    diffInvariant("-t*(v-A()/2*t)<=x-old(x) & x-old(x)<=t*(v-A()/2*t)", 1);
    diffInvariant("-t*(v-A()/2*t)<=y-old(y) & y-old(y)<=t*(v-A()/2*t)", 1);
    (andL('L)*); dW(1) /* goal remains open */
  )
) partial
End.

End.
